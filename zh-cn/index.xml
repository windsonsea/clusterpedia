<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clusterpedia.io – Clusterpedia</title><link>/zh-cn/</link><description>Recent content in Clusterpedia on Clusterpedia.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 04 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="/zh-cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Cluster API Searching Has Never Been Easier</title><link>/zh-cn/blog/2022/08/04/cluster-api-searching-has-never-been-easier/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/08/04/cluster-api-searching-has-never-been-easier/</guid><description>
&lt;p>0.4.0 后，Clusterpedia 提供了更加友好的接入多云平台的方式，用户在多云平台创建或者纳管集群后，便可以直接使用 kubectl 来检索这些集群内的资源。&lt;/p>
&lt;blockquote>
&lt;p>我们在 &lt;a href="https://github.com/clusterpedia-io/clusterpedia/tree/main/deploy/clusterimportpolicy">Clusterpedia 仓库&lt;/a> 中维护了各个多云平台的 &lt;a href="https://clusterpedia.io/zh-cn/docs/concepts/cluster-import-policy/">ClusterImportPolicy&lt;/a>。 非常欢迎大家提交用于对接其他多云平台的 ClusterImportPolicy。&lt;/p>
&lt;p>用户在安装 Clusterpedia 后，创建合适的 ClusterImportPolicy 即可，用户也可以根据自己的需求来&lt;a href="https://clusterpedia.io/docs/usage/interfacing-to-multi-cloud-platforms/#new-clusterimportpolicy">创建新的 ClusterImportPolicy&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Cluster API 的 ClusterImportPolicy 已经在 &lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/288">clusterpedia#288&lt;/a> 中提交, 在 Cluster API 中创建集群后，可以直接使用 Clusterpedia 来对这些集群内的资源进行复杂检索。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get cluster
NAME PHASE AGE VERSION
capi-quickstart Provisioned 10m v1.24.2
capi-quickstart-2 Provisioned 118s v1.24.2
$ kubectl get kubeadmcontrolplane
NAME CLUSTER INITIALIZED API SERVER AVAILABLE REPLICAS READY UPDATED UNAVAILABLE AGE VERSION
capi-quickstart-2-ctm9k capi-quickstart-2 &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m v1.24.2
capi-quickstart-2xcsz capi-quickstart &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m v1.24.2
$ &lt;span style="color:#8f5902;font-style:italic"># pediacluster 会根据 cluster 资源自动创建，更新和删除&lt;/span>
$ kubectl get pediacluster -o wide
NAME READY VERSION APISERVER VALIDATED SYNCHRORUNNING CLUSTERHEALTHY
default-capi-quickstart True v1.24.2 Validated Running Healthy
default-capi-quickstart-2 True v1.24.2 Validated Running Healthy
$ kubectl --cluster clusterpedia get no
CLUSTER NAME STATUS ROLES AGE VERSION
default-capi-quickstart-2 capi-quickstart-2-ctm9k-g2m87 NotReady control-plane 12m v1.24.2
default-capi-quickstart-2 capi-quickstart-2-md-0-s8hbx-7bd44554b5-kzcb6 NotReady &amp;lt;none&amp;gt; 11m v1.24.2
default-capi-quickstart capi-quickstart-2xcsz-fxrrk NotReady control-plane 21m v1.24.2
default-capi-quickstart capi-quickstart-md-0-9tw2g-b8b4f46cf-gggvq NotReady &amp;lt;none&amp;gt; 20m v1.24.2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速部署一套-cluster-api-and-clusterpedia-的示例环境">快速部署一套 Cluster API And Clusterpedia 的示例环境&lt;/h2>
&lt;h3 id="预备条件">预备条件&lt;/h3>
&lt;ul>
&lt;li>安装 &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl&lt;/a> 到本地环境&lt;/li>
&lt;li>安装 &lt;a href="https://kind.sigs.k8s.io/">Kind&lt;/a> and &lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/li>
&lt;li>安装 &lt;a href="https://cluster-api.sigs.k8s.io/user/quick-start.html#install-clusterctl">clusterctl&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Minimum kind supported version: v0.14.0&lt;/p>
&lt;/blockquote>
&lt;h3 id="创键管理集群并部署-cluster-api">创键管理集群并部署 Cluster API&lt;/h3>
&lt;blockquote>
&lt;p>部署 Cluster API 也可以参考 &lt;a href="https://cluster-api.sigs.k8s.io/user/quick-start.html">https://cluster-api.sigs.k8s.io/user/quick-start.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &amp;gt; kind-cluster-with-extramounts.yaml &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span style="color:#4e9a06">kind: Cluster
&lt;/span>&lt;span style="color:#4e9a06">apiVersion: kind.x-k8s.io/v1alpha4
&lt;/span>&lt;span style="color:#4e9a06">nodes:
&lt;/span>&lt;span style="color:#4e9a06">- role: control-plane
&lt;/span>&lt;span style="color:#4e9a06"> extraMounts:
&lt;/span>&lt;span style="color:#4e9a06"> - hostPath: /var/run/docker.sock
&lt;/span>&lt;span style="color:#4e9a06"> containerPath: /var/run/docker.sock
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ kind create cluster --name capi-sample --config kind-cluster-with-extramounts.yaml
$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">CLUSTER_TOPOLOGY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
$ clusterctl init --infrastructure docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-clusterpedia">部署 Clusterpedia&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/clusterpedia-io/clusterpedia.git &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> clusterpedia/charts
$ helm install clusterpedia . &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace clusterpedia-system &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --create-namespace &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set &lt;span style="color:#000">installCRDs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># --set persistenceMatchNode={{ LOCAL_PV_NODE }}&lt;/span>
--set &lt;span style="color:#000">persistenceMatchNode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>capi-sample-control-plane
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>clusterpedia charts 提供了 Local PV，需要创建 LOCAL PV 绑定的节点.
如果不需要 charts 来创建 LOCAL PV，可以使用 &lt;code>--set persistenceMatchNode=None&lt;/code>.
&lt;a href="https://github.com/clusterpedia-io/clusterpedia/tree/main/charts">详见&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>创建用于接入 Cluster API 的&lt;a href="https://clusterpedia.io/docs/concepts/cluster-import-policy/">集群自动导入策略&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f https://raw.githubusercontent.com/Iceber/clusterpedia/add_cluster_api_clusterimportpolicy/deploy/clusterimportpolicy/cluster_api.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Clusterpedia 可以接入任何的多云管理平台，接入方式可以参考 &lt;a href="https://clusterpedia.io/docs/usage/interfacing-to-multi-cloud-platforms/">Interfacing to Multi-Cloud Platforms&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://clusterpedia.io/docs/usage/access-clusterpedia/#configure-the-cluster-shortcut-for-kubectl">生成 kubectl cluster shortcut&lt;/a>，如果使用 client-go 或者 OpenAPI 来访问，可以省略该步骤&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/hack/gen-clusterconfigs.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -
$ &lt;span style="color:#8f5902;font-style:italic"># 使用 kubectl 检索多集群资源，当前 Cluster API 未创建集群，所以返回空&lt;/span>
$ kubectl --cluster clusterpedia api-resources
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-cluster-api-创建集群">使用 Cluster API 创建集群&lt;/h2>
&lt;p>使用示例环境的 Docker Provider 来创建集群时，需要添加 &lt;code>--flavor development&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ clusterctl generate cluster capi-quickstart --flavor development &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --kubernetes-version v1.24.2 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --control-plane-machine-count&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --worker-machine-count&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &amp;gt; capi-quickstart.yaml
$ kubectl apply -f ./capi-quickstart.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="观察集群创建情况">观察集群创建情况&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get cluster
NAME PHASE AGE VERSION
capi-quickstart Provisioned 8s v1.24.2
$ kubectl get kubeadmcontrolplane -w
NAME CLUSTER INITIALIZED API SERVER AVAILABLE REPLICAS READY UPDATED UNAVAILABLE AGE VERSION
capi-quickstart-2xcsz capi-quickstart &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 86s v1.24.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>当 kubeadmcontrolplane 的 Initialized 为 True 后&lt;/strong>，clusterpedia 会自动同步该集群内的资源，可以使用 &lt;code>kubectl --cluster clusterpedia get po -A&lt;/code> 来查看资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pediacluster
NAME READY VERSION APISERVER
default-capi-quickstart True v1.24.2
$ kubectl --cluster clusterpedia get pod -A
NAMESPACE CLUSTER NAME READY STATUS RESTARTS AGE
kube-system default-capi-quickstart kube-apiserver-capi-quickstart-2xcsz-fxrrk 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m32s
kube-system default-capi-quickstart kube-scheduler-capi-quickstart-2xcsz-fxrrk 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m31s
kube-system default-capi-quickstart coredns-6d4b75cb6d-lrwj4 0/1 Pending &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m20s
kube-system default-capi-quickstart kube-proxy-p8v9m 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m20s
kube-system default-capi-quickstart kube-controller-manager-capi-quickstart-2xcsz-fxrrk 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m32s
kube-system default-capi-quickstart etcd-capi-quickstart-2xcsz-fxrrk 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m32s
kube-system default-capi-quickstart kube-proxy-2ln2w 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 105s
kube-system default-capi-quickstart coredns-6d4b75cb6d-2hcmz 0/1 Pending &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 2m20s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>自动创建的 pediacluster 默认的同步资源在 cluster-api &lt;a href="https://clusterpedia.io/docs/concepts/cluster-import-policy/#pediacluster-template">clusterimportpolicy 中设置&lt;/a>，&lt;/p>
&lt;p>用户也可以手动修改 pediacluster 中同步的配置, &lt;a href="https://clusterpedia.io/docs/usage/sync-resources/">Synchronize Cluster Resources&lt;/a>&lt;/p>
&lt;p>在 Cluster API 中删除集群时，Clusterpedia 也同步删除 PeidaCluster，不会继续同步该集群&lt;/p>
&lt;h2 id="对多个集群的资源检索">对多个集群的资源检索&lt;/h2>
&lt;p>使用上述步骤创建多个集群&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get cluster
NAME PHASE AGE VERSION
capi-quickstart Provisioned 10m v1.24.2
capi-quickstart-2 Provisioned 118s v1.24.2
$ kubectl get kubeadmcontrolplane
NAME CLUSTER INITIALIZED API SERVER AVAILABLE REPLICAS READY UPDATED UNAVAILABLE AGE VERSION
capi-quickstart-2-ctm9k capi-quickstart-2 &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m v1.24.2
capi-quickstart-2xcsz capi-quickstart &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m v1.24.2
$ &lt;span style="color:#8f5902;font-style:italic"># pediacluster 会根据 cluster 资源自动创建&lt;/span>
$ kubectl get pediacluster -o wide
NAME READY VERSION APISERVER VALIDATED SYNCHRORUNNING CLUSTERHEALTHY
default-capi-quickstart True v1.24.2 Validated Running Healthy
default-capi-quickstart-2 True v1.24.2 Validated Running Healthy
$ kubectl --cluster clusterpedia get no
CLUSTER NAME STATUS ROLES AGE VERSION
default-capi-quickstart-2 capi-quickstart-2-ctm9k-g2m87 NotReady control-plane 12m v1.24.2
default-capi-quickstart-2 capi-quickstart-2-md-0-s8hbx-7bd44554b5-kzcb6 NotReady &amp;lt;none&amp;gt; 11m v1.24.2
default-capi-quickstart capi-quickstart-2xcsz-fxrrk NotReady control-plane 21m v1.24.2
default-capi-quickstart capi-quickstart-md-0-9tw2g-b8b4f46cf-gggvq NotReady &amp;lt;none&amp;gt; 20m v1.24.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>clusterpedia 提供了两种资源检索方式&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://clusterpedia.io/zh-cn/docs/usage/access-clusterpedia/#%E8%AE%BF%E9%97%AE-clusterpedia-%E8%B5%84%E6%BA%90">兼容 Kubernetes OpenAPI 的资源检索&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get cm -A
NAMESPACE CLUSTER NAME DATA AGE
kube-system default-capi-quickstart extension-apiserver-authentication &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 19m
kube-system default-capi-quickstart kubeadm-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-public default-capi-quickstart cluster-info &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 19m
kube-system default-capi-quickstart kube-proxy &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 19m
kube-node-lease default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-system default-capi-quickstart-2 extension-apiserver-authentication &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 10m
kube-system default-capi-quickstart kubelet-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-system default-capi-quickstart coredns &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-system default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-public default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-system default-capi-quickstart-2 coredns &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
default default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 19m
kube-system default-capi-quickstart-2 kube-proxy &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 10m
kube-system default-capi-quickstart-2 kubeadm-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
kube-system default-capi-quickstart-2 kubelet-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
kube-system default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
kube-node-lease default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
kube-public default-capi-quickstart-2 cluster-info &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 10m
kube-public default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
default default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10m
$ &lt;span style="color:#8f5902;font-style:italic"># gen cluster shortcuts&lt;/span>
$ curl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/hack/gen-clusterconfigs.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -
$ kubectl --cluster default-capi-quickstart get cm -n kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://clusterpedia.io/zh-cn/docs/concepts/collection-resource/">Collection Resource&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get collectionresources
NAME RESOURCES
any *
workloads apps.deployments,apps.daemonsets,apps.statefulsets
kuberesources .*,admission.k8s.io.*,admissionregistration.k8s.io.*,apiextensions.k8s.io.*,apps.*,authentication.k8s.io.*,authorization.k8s.io.*,autoscaling.*,batch.*,certificates.k8s.io.*,coordination.k8s.io.*,discovery.k8s.io.*,events.k8s.io.*,extensions.*,flowcontrol.apiserver.k8s.io.*,imagepolicy.k8s.io.*,internal.apiserver.k8s.io.*,networking.k8s.io.*,node.k8s.io.*,policy.*,rbac.authorization.k8s.io.*,scheduling.k8s.io.*,storage.k8s.io.*
$ kubectl get collectionresources workloads
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检索条件">检索条件&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/#search-by-metadata">元信息过滤(资源名称，命名空间，集群，创建时间区间)&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get cm -A -l &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/clusters in (default-capi-quickstart,default-capi-quickstart-2),\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/namespaces in (kube-system,default)&amp;#34;&lt;/span>
NAMESPACE CLUSTER NAME DATA AGE
kube-system default-capi-quickstart extension-apiserver-authentication &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 23m
kube-system default-capi-quickstart kubeadm-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 23m
kube-system default-capi-quickstart kube-proxy &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 23m
kube-system default-capi-quickstart-2 extension-apiserver-authentication &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 14m
kube-system default-capi-quickstart kubelet-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 23m
kube-system default-capi-quickstart coredns &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 23m
kube-system default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 23m
kube-system default-capi-quickstart-2 coredns &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14m
default default-capi-quickstart kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 23m
kube-system default-capi-quickstart-2 kube-proxy &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 14m
kube-system default-capi-quickstart-2 kubeadm-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14m
kube-system default-capi-quickstart-2 kubelet-config &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14m
kube-system default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14m
default default-capi-quickstart-2 kube-root-ca.crt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14m
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/multi-cluster/#fuzzy-search">模糊搜索&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/multi-cluster/#field-selector">增强的 Field Selector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/multi-cluster/#search-by-parent-or-ancestor-owner">根据父辈或者祖辈 Owner 检索&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/multi-cluster/#paging-and-sorting">分页和排序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://clusterpedia.io/docs/usage/search/#advanced-searchcustom-conditional-search">自定义条件搜索&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Clusterpedia 入选云原生全景图</title><link>/zh-cn/blog/2022/04/29/clusterpedia-%E5%85%A5%E9%80%89%E4%BA%91%E5%8E%9F%E7%94%9F%E5%85%A8%E6%99%AF%E5%9B%BE/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/04/29/clusterpedia-%E5%85%A5%E9%80%89%E4%BA%91%E5%8E%9F%E7%94%9F%E5%85%A8%E6%99%AF%E5%9B%BE/</guid><description>
&lt;p>在 CNCF 最新发布的云原生全景图 (Cloud Native Landscape) 中，Clusterpedia入选Orchestration &amp;amp; Management (编排与管理) 层的 Scheduling &amp;amp; Orchestration (调度与编排) 象限，成为 CNCF 推荐的云原生多集群复杂检索工具。&lt;/p>
&lt;p>&lt;a href="https://landscape.cncf.io/card-mode?category=scheduling-orchestration&amp;grouping=category&amp;selected=clusterpedia">&lt;img class="aligncenter wp-image-7957 size-full" src="https://p26.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/3871965400044875af28b263a790504c" alt="" width="800" height="500" data-tag="bdshare">&lt;/a>&lt;/p>
&lt;hr>
&lt;p>CNCF 全称 Cloud Native Computing Foundation (云原生计算基金会)，隶属于 Linux 基金会，成立于 2015 年 12 月，是非营利性组织，致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术，普及云原生应用。&lt;/p>
&lt;p>云原生全景图由 CNCF 从 2016 年 12 月开始维护，汇总了社区成熟和使用范围较广、具有最佳实践的产品和方案，并加以分类，为企业构建云原生体系提供参考，在云生态研发、运维领域具有广泛影响力。&lt;/p></description></item><item><title>Blog: Clusterpedia v0.2.0 发布</title><link>/zh-cn/blog/2022/04/12/clusterpedia-v0.2.0-%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/04/12/clusterpedia-v0.2.0-%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="使用-kube-config-来接入集群">使用 kube config 来接入集群&lt;/h2>
&lt;p>v0.1.0 时，用户需要分别填写被接入集群的 apiserver 地址，以及访问集群时的认证信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster.clusterpedia.io/v1alpha2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-example&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiserver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://10.30.43.43:6443&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">caData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tokenData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">certData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">keyData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">syncResources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 v0.2.0 中 &lt;code>PediaCluster&lt;/code> 增加了 &lt;code>spec.kubeconfig&lt;/code> 字段，用户可以直接使用 kube config 来接入集群。&lt;/p>
&lt;p>首先 base64 集群的 &lt;em>kube config&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ base64 ./kubeconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后填充到 PediaCluster 的 &lt;code>spec.kubeconfig&lt;/code> 字段中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster.clusterpedia.io/v1alpha2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-example&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">kubeconfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">**base64&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kubeconfig**&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">syncResources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在使用 &lt;em>kube config&lt;/em> 时，不需要填写 &lt;code>spec.apiserver&lt;/code> 以及其他认证字段。&lt;/p>
&lt;p>需要注意，使用 &lt;code>kubectl get pediacluster&lt;/code> 查看接入的集群列表时，&lt;strong>APISERVER&lt;/strong> 不会显示集群地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pediacluster
NAME APISERVER VERSION STATUS
cluster-example v1.22.2 Healthy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要显示，那么需要额外手动设置 &lt;code>spec.kubeconfig&lt;/code>，未来会添加 Mutating Admission Webhook 来解析 kubeconfig 并自动填充 &lt;code>spec.apiserver&lt;/code> 字段。&lt;/p>
&lt;h2 id="新增的检索功能">新增的检索功能&lt;/h2>
&lt;h3 id="通过资源的创建时间来过滤资源">通过资源的创建时间来过滤资源&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作用&lt;/th>
&lt;th>Search Label Key&lt;/th>
&lt;th>URL Query&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Since&lt;/td>
&lt;td>search.clusterpedia.io/since&lt;/td>
&lt;td>since&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Before&lt;/td>
&lt;td>search.clusterpedia.io/before&lt;/td>
&lt;td>before&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>创建时间的区间采用左闭右开的规则，&lt;strong>since &amp;lt;= creation time &amp;lt; before&lt;/strong>。&lt;/p>
&lt;p>时间格式支持 4 种：&lt;/p>
&lt;ol>
&lt;li>&lt;code>Unix 时间戳格式&lt;/code> 为了方便使用会根据时间戳的长度来区分单位为 s 还是 ms。 10 位时间戳单位为秒，13 位时间戳单位为毫秒。&lt;/li>
&lt;li>&lt;code>RFC3339&lt;/code> 2006-01-02T15:04:05Z or 2006-01-02T15:04:05+08:00&lt;/li>
&lt;li>&lt;code>UTC Date&lt;/code> 2006-01-02&lt;/li>
&lt;li>&lt;code>UTC Datetime&lt;/code> 2006-01-02 15:04:05&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>由于 Kube Label Selector 的限制，Search Label 只支持使用 Unix 时间戳和 UTC Data 的格式
URL Query 可以使用四种格式&lt;/p>
&lt;/blockquote>
&lt;p>首先查看一下当前都有哪些资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get pods
CLUSTER NAME READY STATUS RESTARTS AGE
cluster-example quickstart-ingress-nginx-admission-create--1-kxlnn 0/1 Completed &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 171d
cluster-example fake-pod-698dfbbd5b-wvtvw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
cluster-example fake-pod-698dfbbd5b-74cjx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 21d
cluster-example fake-pod-698dfbbd5b-tmcw7 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用创建时间来过滤资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get pods -l &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/since=2022-03-20&amp;#34;&lt;/span>
CLUSTER NAME READY STATUS RESTARTS AGE
cluster-example fake-pod-698dfbbd5b-wvtvw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
cluster-example fake-pod-698dfbbd5b-tmcw7 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
$ kubectl --cluster clusterpedia get pods -l &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/before=2022-03-20&amp;#34;&lt;/span>
CLUSTER NAME READY STATUS RESTARTS AGE
cluster-example quickstart-ingress-nginx-admission-create--1-kxlnn 0/1 Completed &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 171d
cluster-example fake-pod-698dfbbd5b-74cjx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 21d
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-owner-name-检索">使用 Owner Name 检索&lt;/h3>
&lt;p>在 v0.1.0 时，我们可以指定祖辈或者父辈 &lt;code>Owner UID&lt;/code> 来查询资源，不过 &lt;code>Owner UID&lt;/code> 使用起来并不方便，毕竟还需要提前得知 Owner 资源的 UID。&lt;/p>
&lt;p>在 v0.2.0 版本中，支持直接使用 &lt;code>Owner Name&lt;/code> 来查询，并且 Owner 查询由实验性功能进入到正式功能，Search Label 的前缀也由 &lt;em>internalstorage.clusterpedia.io&lt;/em> 升级为 &lt;em>search.clusterpedia.io&lt;/em>，并且提供了 URL Query。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作用&lt;/th>
&lt;th>Search Label Key&lt;/th>
&lt;th>URL Query&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>指定 Owner UID&lt;/td>
&lt;td>search.clusterpedia.io/owner-uid&lt;/td>
&lt;td>ownerUID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指定 Owner Name&lt;/td>
&lt;td>search.clusterpedia.io/owner-name&lt;/td>
&lt;td>ownerName&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指定 Owner Group Resource&lt;/td>
&lt;td>search.clusterpedia.io/owner-gr&lt;/td>
&lt;td>ownerGR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指定 Owner 辈分&lt;/td>
&lt;td>internalstorage.clusterpedia.io/owner-seniority&lt;/td>
&lt;td>ownerSeniority&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>如果用户同时指定了 &lt;code>Owner UID&lt;/code> 和 &lt;code>Owner Name&lt;/code>，那么 &lt;code>Owner Name&lt;/code> 会被忽略。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster cluster-example get pods -l &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/owner-name=fake-pod, \
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/owner-seniority=1&amp;#34;&lt;/span>
CLUSTER NAME READY STATUS RESTARTS AGE
cluster-example fake-pod-698dfbbd5b-wvtvw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
cluster-example fake-pod-698dfbbd5b-74cjx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 21d
cluster-example fake-pod-698dfbbd5b-tmcw7 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 8d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>另外为了避免某些情况下，owner 资源存在多种类型，我们可以使用 &lt;code>Owner Group Resource&lt;/code> 来限制 Owner 的类型。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster cluster-example get pods -l &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/owner-name=fake-pod,\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/owner-gr=deployments.apps,\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/owner-seniority=1&amp;#34;&lt;/span>
... some output
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="根据资源名称的模糊搜索">根据资源名称的模糊搜索&lt;/h3>
&lt;p>模糊搜索是一个非常常用的功能，当前暂时只提供了资源名称上的模糊搜索，由于还需要更多功能上的讨论，暂时作为试验性功能&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作用&lt;/th>
&lt;th>Search Label Key&lt;/th>
&lt;th>URL Query&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>根据资源名称进行模糊搜索&lt;/td>
&lt;td>internalstorage.clusterpedia.io/fuzzy-name&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get deployments -l &lt;span style="color:#4e9a06">&amp;#34;internalstorage.clusterpedia.io/fuzzy-name=fake&amp;#34;&lt;/span>
CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
cluster-example fake-pod 3/3 &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 113d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以使用 &lt;code>in&lt;/code> 操作符来指定多个参数，这样可以过滤出名字包含所有模糊字符串的资源。&lt;/p>
&lt;h2 id="其他功能">其他功能&lt;/h2>
&lt;p>在 v0.1.0 中，查询资源列表时，允许返回的剩余的资源数量，这样用户可以通过计算就能得知当前检索添加下的资源总量。&lt;/p>
&lt;p>在 v0.2.0 中对该功能进行了强化， 当分页查询的 &lt;code>Offset&lt;/code> 参数过大时，&lt;code>ReaminingItemCount&lt;/code> 可以为负数，
这样可以保证通过 &lt;strong>&lt;code>offset + len(list.items) + list.metadata.remainingItemCount&lt;/code>&lt;/strong> 总是可以计算出正确的资源总量。&lt;/p>
&lt;h1 id="发布日志httpsgithubcomclusterpedia-ioclusterpediareleasestagv020">&lt;a href="https://github.com/clusterpedia-io/clusterpedia/releases/tag/v0.2.0">发布日志&lt;/a>&lt;/h1>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;/h2>
&lt;ul>
&lt;li>支持使用 Helm 部署 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/53">#53&lt;/a>, &lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/125">#125&lt;/a>, @calvin0327, @wzshiming)&lt;/li>
&lt;li>PediaCluster 支持使用 kube config 来接入集群 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/115">#115&lt;/a>, @wzshiming)&lt;/li>
&lt;/ul>
&lt;h3 id="apiserver">APIServer&lt;/h3>
&lt;ul>
&lt;li>支持通过创建时间的区间来过滤资源 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/113">#113&lt;/a>, @cleverhu)&lt;/li>
&lt;li>支持根据 Owner 的名字来检索资源，并且 Owner 查询成为 clusterpedia 的正式功能，同时支持 Search Label 和 URL Query (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/91">#91&lt;/a>, @Iceber)&lt;/li>
&lt;/ul>
&lt;h3 id="default-storage-layer">Default Storage Layer&lt;/h3>
&lt;ul>
&lt;li>支持根据资源名称的模糊搜索 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/117">#117&lt;/a>, @cleverhu)&lt;/li>
&lt;li>RemainingItemCount 可以为负数，在 Offset 过大时依然可以使用 &lt;code>offset + len(items) + remainingItemCount&lt;/code> 来计算资源总量。(&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/123">#123&lt;/a>, @cleverhu)&lt;/li>
&lt;/ul>
&lt;h4 id="bug-fixes">Bug Fixes&lt;/h4>
&lt;ul>
&lt;li>修复由于不必要的反序列化导致的 cpu 损耗，提升了查询时的性能 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/89">#89&lt;/a>, &lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/92">#92&lt;/a>, @Iceber)&lt;/li>
&lt;/ul>
&lt;h4 id="deprecation">Deprecation&lt;/h4>
&lt;ul>
&lt;li>Owner 查询已移动到正式功能，用于 Owner 查询的试验性 Search Label —— &lt;code>internalstorage.clusterpedia.io/owner-name&lt;/code> 和 &lt;code>internalstorage.clusterpedia.io/owner-seniority&lt;/code> 会在下一个版本被移除 (&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/91">#91&lt;/a>, @Iceber)&lt;/li>
&lt;/ul></description></item><item><title>Blog: 使用 Helm 快速部署 Clusterpedia</title><link>/zh-cn/blog/2022/04/11/%E4%BD%BF%E7%94%A8-helm-%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2-clusterpedia/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/04/11/%E4%BD%BF%E7%94%A8-helm-%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2-clusterpedia/</guid><description>
&lt;p>当前 Clusterpedia 已经支持通过 Helm 来快速部署。&lt;/p>
&lt;p>首先需要保证当前环境已经安装 helm v3。&lt;/p>
&lt;h2 id="准备阶段">准备阶段&lt;/h2>
&lt;p>拉取 Clusterpedia 仓库代码。&lt;/p>
&lt;blockquote>
&lt;p>当前暂时还未将 chart 上传至 charts 公共仓库。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/clusterpedia-io/clusterpedia.git
$ &lt;span style="color:#204a87">cd&lt;/span> clusterpedia/charts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 clusterpedia 使用 &lt;code>bitnami/postgresql&lt;/code> 和 &lt;code>bitnami/mysql&lt;/code> 作为存储组件子 chart，
所以需要添加 bitnami 仓库，并更新 clusterpedia chart 的依赖。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm repo add bitnami https://charts.bitnami.com/bitnami
$ helm dependency build
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="选择存储组件">选择存储组件&lt;/h3>
&lt;p>Clusterpedia Chart 通过子 chart 的方式，提供了 &lt;code>bitnami/postgresql&lt;/code> 和 &lt;code>bitnami/mysql&lt;/code> 两款存储组件可供选择。&lt;/p>
&lt;p>&lt;code>postgresql&lt;/code> 为默认的存储组件，如果想要使用 MySQL，那么在后续安装命令中添加 &lt;code>--set postgresql.enabled=false --set mysql.enabled=true&lt;/code>&lt;/p>
&lt;p>更多关于存储组件的配置，可以参考 &lt;a href="https://github.com/bitnami/charts/tree/master/bitnami/postgresql">bitnami/postgresql&lt;/a> 和 &lt;a href="https://github.com/bitnami/charts/tree/master/bitnami/mysql">bitnami/mysql&lt;/a>。&lt;/p>
&lt;p>&lt;strong>用户也可以选择不安装存储组件，而是使用外部组件，相关设置可以参考 charts/values.yaml&lt;/strong>&lt;/p>
&lt;h3 id="选择-crd-的安装管理方式">选择 CRD 的安装/管理方式&lt;/h3>
&lt;p>clusterpedia 要求环境中创建相应的 CRD 资源，可以选择手动部署 CRD YAML，也可以在 Helm 中管理。&lt;/p>
&lt;h4 id="手动管理">手动管理&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f ./_crds
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-helm-管理">使用 Helm 管理&lt;/h4>
&lt;p>在后续安装命令中需要手动添加 &lt;code>--set installCRDs=true&lt;/code> 即可。&lt;/p>
&lt;h3 id="决定是否需要创建-local-pv">决定是否需要创建 Local PV&lt;/h3>
&lt;p>Clusterpedia Chart 可以为用户创建存储组件使用 Local PV。&lt;/p>
&lt;p>&lt;strong>用户在安装时需要通过 &lt;code>--set persistenceMatchNode=&amp;lt;selected node name&amp;gt;&lt;/code> 来指定 Local PV 所在节点。&lt;/strong>&lt;/p>
&lt;p>如果用户不需要创建 Local PV，那么需要使用 &lt;code>--set persistenceMatchNode=None&lt;/code> 显式声明。&lt;/p>
&lt;h2 id="安装-clusterpedia">安装 Clusterpedia&lt;/h2>
&lt;p>经过上述决策后，用户可以进行安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm install clusterpedia . &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace clusterpedia-system &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --create-namespace &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set &lt;span style="color:#000">persistenceMatchNode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">={{&lt;/span> LOCAL_PV_NODE &lt;span style="color:#ce5c00;font-weight:bold">}}&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># --set installCRDs=true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="卸载-clusterpedia">卸载 Clusterpedia&lt;/h2>
&lt;p>在卸载 Clusterpedia 前需要手动清理所有 &lt;code>PediaCluster&lt;/code> 资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pediacluster
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PediaCluster&lt;/code> 清理完成后就可以执行卸载命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm -n clusterpedia-system uninstall clusterpedia
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果用户使用手动创建的 CRD 资源，那么同样也需要手动清理 CRD。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl delete -f ./_crds
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意 PVC 和 PV 并不会删除，用户需要手动删除。&lt;/strong>&lt;/p>
&lt;p>如果创建了 Local PV，那么还需要进入相应节点，清理 Local PV 的遗留数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 登录 Local PV 绑定的节点&lt;/span>
$ rm -rf /var/local/clusterpedia/internalstorage/&amp;lt;storage type&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Blog: Clusterpedia 上榜| CSDN IT 技术影响力之星</title><link>/zh-cn/blog/2022/04/01/clusterpedia-%E4%B8%8A%E6%A6%9C-csdn-it-%E6%8A%80%E6%9C%AF%E5%BD%B1%E5%93%8D%E5%8A%9B%E4%B9%8B%E6%98%9F/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/04/01/clusterpedia-%E4%B8%8A%E6%A6%9C-csdn-it-%E6%8A%80%E6%9C%AF%E5%BD%B1%E5%93%8D%E5%8A%9B%E4%B9%8B%E6%98%9F/</guid><description>
&lt;div align="center">&lt;img src="http://blog.daocloud.io/wp-content/uploads/d807bc86a68e6e3bd67c041e86e611e0.jpg" style="width:900px;" />&lt;/div>
&lt;hr>
&lt;p>3 月 30 日，CSDN 正式公布 IT 技术影响力之星评选结果，Clusterpedia 入选「2021 年度云原生技术产品」。&lt;/p>
&lt;p>在多云时代，多集群内部资源管理和检索越来越复杂，成为多云管理的一大难题。&lt;/p>
&lt;p>在单集群中，我们通常使用 kubectl 来查看资源，或者直接访问 Kubernetes 的 OpenAPI，在代码中也可以借助 client-go 来对资源进行检索。&lt;/p>
&lt;p>而在多集群环境下，Clusterpedia 通过兼容 Kubernetes OpenAPI ，用户可以依然使用单集群的方式，来对多集群资源进行复杂检索，无需从每个集群中拉取数据到本地进行过滤。&lt;/p>
&lt;div align="center">&lt;img src="https://p3.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/ad3f106d991a45acbbdfe067425def26" style="width:300px;" />&lt;/div></description></item><item><title>Blog: 视频讲解｜Clusterpedia -- 多云环境下的资源复杂检索</title><link>/zh-cn/blog/2022/03/01/%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3clusterpedia-%E5%A4%9A%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E5%A4%8D%E6%9D%82%E6%A3%80%E7%B4%A2/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/03/01/%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3clusterpedia-%E5%A4%9A%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E5%A4%8D%E6%9D%82%E6%A3%80%E7%B4%A2/</guid><description>
&lt;p>Clusterpedia 的发起人 &amp;ndash;「Daocloud 道客」的云原生研发工程师蔡威，为大家详细介绍 Clusterpedia 在资源检索上提供的功能，让大家可以直观的了解到使用 Clusterepdia 可以解决哪些问题。&lt;/p>
&lt;div align="center">&lt;a href="https://www.bilibili.com/video/BV1qi4y117Vq">&lt;img class="aligncenter wp-image-7957 size-full" src="http://blog.daocloud.io/wp-content/uploads/clusterpedia.png" alt="" width="800" height="500" data-tag="bdshare">&lt;/a>&lt;/div>
&lt;h2 id="clusterpedia-多集群资源检索神器">Clusterpedia 多集群资源检索神器&lt;/h2>
&lt;p>随着云原生技术的发展、承载业务量的增加以及集群规模的不断扩大，单个 Kubernetes 集群已经无法满足很多企业的需求，我们在逐渐的步入多云时代，多集群内部资源管理和检索变得越发复杂和困难。&lt;/p>
&lt;p>由此，社区不断出现了很多优秀的的开源项目，例如用于集群生命周期管理的 cluster api，以及多云应用管理的 karmada， clusternet 等。而 Clusterpedia 便是建立在这些云管平台之上，为用户提供多集群资源的复杂检索。&lt;/p>
&lt;p>在单集群中，我们通常使用 kubectl 来查看资源，或者直接访问 Kubernetes 的 OpenAPI，在代码中也可以借助 client-go 来对资源进行检索。&lt;/p>
&lt;p>而在多集群环境下，Clusterpedia 通过兼容 Kubernetes OpenAPI ，用户可以依然使用单集群的方式，来对多集群资源进行复杂检索，无需从每个集群中拉取数据到本地进行过滤。&lt;/p>
&lt;p>当然 Clusterpedia 的能力并不仅仅只是检索查看，未来还会支持对资源的简单控制，就像 wiki 同样支持编辑词条一样。Clusterpedia 具有许多特性和功能：&lt;/p>
&lt;ul>
&lt;li>支持复杂的检索条件，过滤条件，排序，分页等等&lt;/li>
&lt;li>支持查询资源时请求附带关系资源&lt;/li>
&lt;li>统一主集群和多集群资源检索入口&lt;/li>
&lt;li>兼容 kubernetes OpenAPI, 可以直接使用 kubectl 进行多集群检索, 而无需第三方插件或者工具&lt;/li>
&lt;li>兼容收集不同版本的集群资源，不受主集群版本约束，&lt;/li>
&lt;li>资源收集高性能，低内存&lt;/li>
&lt;li>根据集群当前的健康状态，自动启停资源收集&lt;/li>
&lt;li>插件化存储层，用户可以根据自己需求使用其他存储组件来自定义存储层&lt;/li>
&lt;li>高可用&lt;/li>
&lt;/ul>
&lt;h2 id="下期内容">下期内容&lt;/h2>
&lt;p>除了支持多集群的复杂检索，Clusterpedia 还有很多其他优点，例如通过聚合式 API 来统一主集群和多集群资源的访问入口，在实时同步子集群资源时的低内存占用以及弱网优化，另外还有通过插件化存储层来解耦对存储组件的依赖。&lt;/p>
&lt;p>下一期将为大家介绍具体设计和实现原理，详细解读 Clusterpedia 的优点，敬请期待。&lt;/p></description></item><item><title>Blog: 首发｜Clusterpedia 0.1.0 四大重要功能</title><link>/zh-cn/blog/2022/02/16/%E9%A6%96%E5%8F%91clusterpedia-0.1.0-%E5%9B%9B%E5%A4%A7%E9%87%8D%E8%A6%81%E5%8A%9F%E8%83%BD/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/02/16/%E9%A6%96%E5%8F%91clusterpedia-0.1.0-%E5%9B%9B%E5%A4%A7%E9%87%8D%E8%A6%81%E5%8A%9F%E8%83%BD/</guid><description>
&lt;p>&lt;strong>Clusterpedia 第一个版本 &amp;ndash; Clusterpedia 0.1.0 正式发布&lt;/strong>，即日起进入版本迭代阶段。相比于初期的 0.0.8 和 0.0.9-alpha，0.1.0 添加了很多功能，并且做了一些不兼容的更新。&lt;/p>
&lt;p>如果由 0.0.9-alpha 升级的话，可以参考 &lt;a href="/blog/2022/02/15/upgrade-to-clusterpedia-0.1.0/">Upgrade to Clusterpedia 0.1.0&lt;/a>&lt;/p>
&lt;h2 id="重要功能">重要功能&lt;/h2>
&lt;p>我们先介绍一下在 0.1.0 中增加的四大重要的功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对 Not Ready 的集群进行资源检索时，增加了 Warning 提醒&lt;/strong>&lt;/li>
&lt;li>&lt;strong>增强了原生 Field Selector 的能力&lt;/strong>&lt;/li>
&lt;li>&lt;strong>根据父辈或者祖辈的 Owner 来进行查询&lt;/strong>&lt;/li>
&lt;li>&lt;strong>响应数据携带 remaining item count&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/clusterpedia-io/clusterpedia/releases/tag/v0.1.0">v0.1.0 Release Notes&lt;/a>&lt;/p>
&lt;h2 id="资源检索时的-warning-提醒">资源检索时的 Warning 提醒&lt;/h2>
&lt;p>集群由于某些原因处于非 Ready 的状态时，资源通常也无法正常同步，在获取到该集群内的资源时，会通过 Warnning 提醒来告知用户集群异常，并且获取到的资源可能并不是实时准确的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pediacluster
NAME APISERVER VERSION STATUS
cluster-1 https://10.6.100.10:6443 v1.22.2 ClusterSynchroStop
$ kubectl --cluster cluster-1 get pods
Warning: cluster-1 is not ready and the resources obtained may be inaccurate, reason: ClusterSynchroStop
CLUSTER NAME READY STATUS RESTARTS AGE
cluster-1 fake-pod-698dfbbd5b-64fsx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 68d
cluster-1 fake-pod-698dfbbd5b-9ftzh 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 39d
cluster-1 fake-pod-698dfbbd5b-rk74p 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 39d
cluster-1 quickstart-ingress-nginx-admission-create--1-kxlnn 0/1 Completed &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 126d
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="强化-field-selector">强化 Field Selector&lt;/h2>
&lt;p>原生 kubernetes 对于 Field Selector 的支持非常有限，默认只支持 metadata.namespace 和 metadata.name 字段的过滤，尽管一些特定的资源会支持一些特殊的字段，但是使用起来还是比较局限，操作符只能支持 =, ==, !=。&lt;/p>
&lt;p>Clusterpedia 在兼容原生 Field Selector 的基础上，不仅仅支持了更加灵活的字段过滤，还支持和 Label Selector 相同的操作符：!, =, !=, ==, in, notin。&lt;/p>
&lt;p>例如我们可以像 label selector 一样，通过 annotations 过滤资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get deploy --field-selector&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;metadata.annotations[&amp;#39;test.io&amp;#39;] in (value1, value2)&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="/docs/usage/search/multi-cluster/#field-selector">Lean More&lt;/a>&lt;/p>
&lt;h2 id="根据父辈或者祖辈-owner-进行查询">根据父辈或者祖辈 Owner 进行查询&lt;/h2>
&lt;p>Kubernetes 资源之间通常会存在一种 Owner 关系, 例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Pod&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ownerReferences&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">blockOwnerDeletion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">controller&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ReplicaSet&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">fake-pod-698dfbbd5b&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uid&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">d5bf2bdd-47d2-4932-84fb-98bde486d244&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clusterpedia 不仅支持根据 Owner 查询，还支持对 Owner 进行辈分提升来根据祖辈或者更高辈分的 Owner 来检索资源。&lt;/p>
&lt;p>例如可以通过 Deployment 获取相应的所有 pods。&lt;/p>
&lt;blockquote>
&lt;p>当前暂时只支持通过Owner UID 来查询资源, 使用 Owner Name 来进行查询的功能尚在讨论中，可以在 issue: Support for searching resources by owner 参与讨论。
v0.2.0 中已经支持通过 Owner name 进行查询&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#000">DEPLOY_UID&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl --cluster cluster-1 get deploy fake-deploy -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.metadata.uid}&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
$ kubectl --cluster cluster-1 get pods -l &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;internalstorage.clusterpedia.io/owner-uid=&lt;/span>&lt;span style="color:#000">$DEPLOY_UID&lt;/span>&lt;span style="color:#4e9a06">,\
&lt;/span>&lt;span style="color:#4e9a06"> internalstorage.clusterpedia.io/owner-seniority=1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="/docs/usage/search/multi-cluster/#search-by-parent-or-ancestor-owner">Lean More&lt;/a>&lt;/p>
&lt;h2 id="响应数据内携带剩余资源数量">响应数据内携带剩余资源数量&lt;/h2>
&lt;p>在一些 UI 场景下，往往需要获取当前检索条件下的资源总量。&lt;/p>
&lt;p>Kubernetes 响应的 ListMeta 中 RemainingItemCount 字段表示剩余的资源数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ListMeta&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// remainingItemCount is the number of subsequent items in the list which are not included in this
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// list response. If the list request contained label or field selectors, then the number of
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// remaining items is unknown and the field will be left unset and omitted during serialization.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// If the list is complete (either because it is not chunking or because this is the last chunk),
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// then there are no more remaining items and this field will be left unset and omitted during
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// serialization.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Servers older than v1.15 do not set this field.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// should not rely on the remainingItemCount to be set or to be exact.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// +optional
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">RemainingItemCount&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#4e9a06">`json:&amp;#34;remainingItemCount,omitempty&amp;#34; protobuf:&amp;#34;bytes,4,opt,name=remainingItemCount&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>复用 ListMeta.RemainingItemCount，通过简单计算便可以获取当前检索条件下的资源总量: &lt;strong>total = offset + len(list.items) + list.metadata.remainingItemCount&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>该功能需要搭配分页功能一起使用&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get --raw&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withRemainingCount&amp;amp;limit=1&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> jq
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;DeploymentList&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;apps/v1&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;metadata&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;remainingItemCount&amp;#34;&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;items&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
...
&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="/docs/usage/search/multi-cluster/#response-with-remaining-count">Lean More&lt;/a>&lt;/p></description></item><item><title>Blog: 升级到 Clusterpedia 0.1.0</title><link>/zh-cn/blog/2022/02/15/%E5%8D%87%E7%BA%A7%E5%88%B0-clusterpedia-0.1.0/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2022/02/15/%E5%8D%87%E7%BA%A7%E5%88%B0-clusterpedia-0.1.0/</guid><description>
&lt;p>随着 Clusterpedia 0.1.0 版本的发布，我们可以将早期的 0.0.9-alpha 或者 0.0.8 更新到 0.1.0 了。&lt;/p>
&lt;h2 id="旧版本资源清理">旧版本资源清理&lt;/h2>
&lt;p>由于资源检索的路径发生了修改(&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/73">#73&lt;/a>)，所以需要使用 0.0.9-alpha 的 &lt;a href="https://github.com/clusterpedia-io/clusterpedia/blob/v0.0.9-alpha/hack/clean-clusterconfigs.sh">clean-clusterconfigs.sh&lt;/a> 来清理 &lt;em>.kube/config&lt;/em> 中的 Clusterpedia 集群访问配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.0.9-alpha/hack/clean-clusterconfigs.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>备份并删除 &lt;code>PediaCluster&lt;/code> 资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get pediacluster -o yaml &amp;gt; clusters.yaml.bak
kubectl delete pediacluster --all
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有的 &lt;code>PediaCluster&lt;/code> 资源都删除后，删除 &lt;code>PediaCluster CRD&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete crd pediaclusters.clusters.clusterpedia.io
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除用于注册聚合式 API 的 &lt;code>APIServices&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete apiservices v1alpha1.pedia.clusterpedia.io
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新-clusterpedia">更新 Clusterpedia&lt;/h2>
&lt;p>新建 &lt;code>PediaCluster CRD&lt;/code>, 并且更新 &lt;code>Clusterpedia APIServer&lt;/code> 和 &lt;code>Clustersynchro Manager&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#000">DEPLOY_YAML_PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/deploy
&lt;span style="color:#000">CRD_YAML_PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$DEPLOY_YAML_PATH&lt;/span>/crds
kubectl apply -f &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">$CRD_YAML_PATH&lt;/span>/cluster.clusterpedia.io_pediaclusters.yaml,&lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">$DEPLOY_YAML_PATH&lt;/span>/clusterpedia_clustersynchro_manager_deployment.yaml,&lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">$DEPLOY_YAML_PATH&lt;/span>/clusterpedia_apiserver_deployment.yaml,&lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">$DEPLOY_YAML_PATH&lt;/span>/clusterpedia_apiserver_apiservice.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以将 YAML 下载到本地，或者拉取项目到本地，进入 ./deploy 目录下执行 kubectl apply。&lt;/p>
&lt;h2 id="重新接入集群">重新接入集群&lt;/h2>
&lt;p>由于 &lt;code>PediaCluster&lt;/code> 的 APIVersion 和结构都进行了一些不兼容的优化，所以需要重新根据备份的 &lt;em>clusters.yaml.bak&lt;/em> 来重新创建 &lt;code>PediaCluster&lt;/code>。&lt;/p>
&lt;p>当前 &lt;code>PediaCluster&lt;/code> 的示例为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster.clusterpedia.io/v1alpha2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-example&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiserver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://10.30.43.43:6443&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">caData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tokenData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">certData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">keyData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">syncResources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">deployments&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">pods&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相比 0.0.9-alpha 主要有三个修改：&lt;/p>
&lt;ul>
&lt;li>&lt;code>apiVersion&lt;/code> 由 &lt;em>clusters.clusterpedia.io/v1alpha1&lt;/em> -&amp;gt; &lt;em>cluster.clusterpedia.io/v1alpha2&lt;/em>&lt;/li>
&lt;li>&lt;code>spec.apiserverURL&lt;/code> -&amp;gt; &lt;code>spec.apiserver&lt;/code>&lt;/li>
&lt;li>&lt;code>spec.resources&lt;/code> -&amp;gt; &lt;code>spec.syncResources&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>具体的修改可以查看: &lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/70">#70&lt;/a>
&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/67">#67&lt;/a>
&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/76">#76&lt;/a>
&lt;a href="https://github.com/clusterpedia-io/clusterpedia/pull/77">#77&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>根据 &lt;em>clusters.yaml.bak&lt;/em> 内旧的 PediaCluster 来创建新的 &lt;code>PediaCluster&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster.clusterpedia.io/v1alpha2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster.clusterpedia.io/v1alpha2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看集群接入状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get pediacluster
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为多集群检索生成快捷访问配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/hack/gen-clusterconfigs.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Blog: Clusterpedia 加持 kubectl，检索多集群资源</title><link>/zh-cn/blog/2021/12/03/clusterpedia-%E5%8A%A0%E6%8C%81-kubectl%E6%A3%80%E7%B4%A2%E5%A4%9A%E9%9B%86%E7%BE%A4%E8%B5%84%E6%BA%90/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>/zh-cn/blog/2021/12/03/clusterpedia-%E5%8A%A0%E6%8C%81-kubectl%E6%A3%80%E7%B4%A2%E5%A4%9A%E9%9B%86%E7%BE%A4%E8%B5%84%E6%BA%90/</guid><description>
&lt;p>在多集群时代，我们可以通过 cluster-api 来批量创建管理集群，使用 Karmada/Clusternet 来分发部署应用。&lt;/p>
&lt;p>不过我们貌似还是缺少了什么功能，我们要如何去统一的查看多个集群中的资源呢？&lt;/p>
&lt;p>对于单个集群的资源，我们可以使用 kubectl 来查看搜索资源，但是在想要检索多集群的资源时，貌似没有什么趁手的产品可以使用。&lt;/p>
&lt;p>不过从今天开始，这个问题不会再困扰你，因为&lt;strong>在 Clusterpedia 的加持下，你手上的 kubectl 已经可以用来检索多集群资源啦。&lt;/strong>&lt;/p>
&lt;p>例如，使用 kubectl 来获取多个集群下 kube-system 命名空间内的 deployments。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get deployments -n kube-system
CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
cluster-1 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 63d
cluster-1 coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 63d
cluster-2 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
cluster-2 coredns-coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 109d
cluster-2 dce-chart-manager 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
cluster-2 dce-clair 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="clusterpedia-介绍">Clusterpedia 介绍&lt;/h2>
&lt;p>Clusterpedia，名字借鉴自 Wikipedia，同样也展现了 Clusterpedia 的核心理念 —— 多集群的百科全书。&lt;/p>
&lt;p>通过聚合多集群资源，在兼容 Kubernetes OpenAPI 的基础上额外提供了更加强大的检索功能，让用户更快更方便的在多集群中获取到想要的任何资源。&lt;/p>
&lt;p>当然 Clusterpedia 的能力并不仅仅只是检索查看，未来还会支持对资源的简单控制，就像 wiki 同样支持编辑词条一样。&lt;/p>
&lt;h3 id="架构设计">架构设计&lt;/h3>
&lt;div align="center">&lt;img src="https://github.com/clusterpedia-io/clusterpedia/blob/main/docs/images/arch.png?raw=true" style="width:900px;" />&lt;/div>
Clusterpedia 在架构上分为四个部分：
&lt;ul>
&lt;li>&lt;code>Clusterpedia APIServer&lt;/code>：以 Aggregated API 的方式注册到 Kube APIServer，通过统一的入口来提供服务。&lt;/li>
&lt;li>&lt;code>ClusterSynchro Manager&lt;/code>：管理用于同步集群资源的 Cluster Synchro。&lt;/li>
&lt;li>&lt;code>Storage Layer (存储层)&lt;/code>：用来连接操作具体的存储组件，然后通过存储层接口注册到 Clusterpedia APIServer 和 ClusterSynchro Manager 中。&lt;/li>
&lt;li>&lt;code>存储组件&lt;/code>：具体的存储设施，例如 mysql， postgres，redis 或者其他图数据库。
另外，Clusterpedia 会使用 &lt;strong>PediaCluster&lt;/strong> 这个自定义资源来实现集群认证和资源收集配置&lt;/li>
&lt;/ul>
&lt;p>Clusterpedia 还提供了可以接入 mysql 和 postgres 的默认存储层。&lt;/p>
&lt;p>Clusterpedia 并不关心用户所使用的具体存储设置是什么，用户可以根据自己的需求来选择或者实现存储层，然后将存储层以插件的形式注册到 Clusterpedia 中来使用。&lt;/p>
&lt;h3 id="特性和功能">特性和功能&lt;/h3>
&lt;ul>
&lt;li>支持复杂的检索条件，过滤条件，排序，分页等等&lt;/li>
&lt;li>支持查询资源时请求附带关系资源&lt;/li>
&lt;li>统一主集群和多集群资源检索入口&lt;/li>
&lt;li>兼容 kubernetes OpenAPI, 可以直接使用 kubectl 进行多集群检索, 而无需第三方插件或者工具&lt;/li>
&lt;li>兼容收集不同版本的集群资源，不受主集群版本约束，&lt;/li>
&lt;li>资源收集高性能，低内存&lt;/li>
&lt;li>根据集群当前的健康状态，自动启停资源收集&lt;/li>
&lt;li>插件化存储层，用户可以根据自己需求使用其他存储组件来自定义存储层&lt;/li>
&lt;li>高可用&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>关于部署的详细流程，可以查看 &lt;a href="/zh-cn/docs/installation">安装 Clusterpedia&lt;/a>，这里着重介绍了如何使用 clusterpedia。&lt;/p>
&lt;h2 id="集群资源收集">集群资源收集&lt;/h2>
&lt;p>clusterpedia 部署完成后，我们可以通过 kubectl 来操作 &lt;strong>PediaCluster&lt;/strong> 资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pediaclusters
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 examples 目录下，可以看到 PediaCluster 的示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">clusters.clusterpedia.io/v1alpha1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PediaCluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cluster-example&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiserverURL&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://172.30.43.41:6443&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">caData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tokenData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">certData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">keyData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">deployments&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">pods&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>PediaCluster&lt;/strong> 在配置上可以分成两部分&lt;/p>
&lt;ul>
&lt;li>集群认证&lt;/li>
&lt;li>指定资源收集 &lt;em>.spec.resources&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="集群认证">集群认证&lt;/h3>
&lt;p>caData , tokenData , certData , keyData 字段用于集群的验证。&lt;/p>
&lt;p>当前暂时不支持从 ConfigMap 或者 Secret 中获取验证相关的信息，不过已经在 Roadmap 中了。&lt;/p>
&lt;p>&lt;strong>在设置验证字段时，注意要使用 base64 后的字符串&lt;/strong>&lt;/p>
&lt;p>在 examples 目录下提供了生成用于访问子集群的 rbac yaml &lt;em>clusterpedia_synchro_rbac.yaml&lt;/em>，来方便的获取子集群的权限 token。&lt;/p>
&lt;p>在子集群中部署该 yaml，然后获取对应的 token 和 ca 证书。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#8f5902;font-style:italic"># 当前 kubectl 连接到子集群中&lt;/span>
$ kubectl apply -f examples/clusterpedia_synchro_rbac.yaml
clusterrole.rbac.authorization.k8s.io/clusterpedia-synchro created
serviceaccount/clusterpedia-synchro created
clusterrolebinding.rbac.authorization.k8s.io/clusterpedia-synchro created
$ &lt;span style="color:#000">SYNCHRO_TOKEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get secret &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get serviceaccount clusterpedia-synchro -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.secrets[0].name}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.data.token}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
$ &lt;span style="color:#000">SYNCHRO_CA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get secret &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get serviceaccount clusterpedia-synchro -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.secrets[0].name}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.data.ca\.crt}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>复制 ./examples/pediacluster.yaml, 并修改 .spec.apiserverURL 和 .metadata.name 字段，并且将 $SYNCHRO_TOKEN 和 $SYNCHRO_CA 填写到 tokenData 和 caData 中。&lt;/p>
&lt;p>使用 kubectl apply 创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f cluster-1.yaml
pediacluster.clusters.clusterpedia.io/cluster-1 created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便后续使用，建议再创建一个 cluster-2&lt;/p>
&lt;h3 id="集群收集">集群收集&lt;/h3>
&lt;p>可以通过设置 &lt;em>spec.resources&lt;/em> 字段的 group 和 group 下的 resources 来进行指定收集的资源。&lt;/p>
&lt;p>在 status 中我们也可以看到资源的收集状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">status&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">conditions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">lastTransitionTime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2021-12-02T04:00:45Z&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Healthy&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">status&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Ready&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Pod&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">namespaced&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">pods&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">syncConditions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">lastTransitionTime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2021-12-02T04:00:45Z&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">status&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Syncing&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storageVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deployment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">namespaced&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">deployments&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">syncConditions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">lastTransitionTime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2021-12-02T04:00:45Z&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">status&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Syncing&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storageVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1.22.2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源检索">资源检索&lt;/h2>
&lt;p>配置好我们需要收集的资源后，我们就可以进行重头戏了 —— 集群检索&lt;/p>
&lt;p>clusterpedia 支持两种资源检索:&lt;/p>
&lt;ul>
&lt;li>兼容 Kubernetes OpenAPI 的资源检索&lt;/li>
&lt;li>集合资源 (Collection Resource) 的检索&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl api-resources &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep pedia.clusterpedia.io
collectionresources pedia.clusterpedia.io/v1alpha1 &lt;span style="color:#204a87">false&lt;/span> CollectionResource
resources pedia.clusterpedia.io/v1alpha1 &lt;span style="color:#204a87">false&lt;/span> Resources
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便我们更好的使用 kubectl 来进行检索，我们可以先通过 make gen-clusterconfig 来为子集群创建用于检索的 &amp;lsquo;快捷方式&amp;rsquo;。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ make gen-clusterconfigs
./hack/gen-clusterconfigs.sh
Current Context: kubernetes-admin@kubernetes
Current Cluster: kubernetes
Server: https://10.9.11.11:6443
TLS Server Name:
Insecure Skip TLS Verify:
Certificate Authority:
Certificate Authority Data: ***
Cluster &lt;span style="color:#4e9a06">&amp;#34;clusterpedia&amp;#34;&lt;/span> set.
Cluster &lt;span style="color:#4e9a06">&amp;#34;cluster-1&amp;#34;&lt;/span> set.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 kubectl config get-clusters 可以查看当前支持的集群。&lt;/p>
&lt;p>其中 clusterpedia 是一个特殊的 cluster，用于多集群检索，以 kubectl &amp;ndash;cluster clusterpedia 的方式来检索多个集群的资源。&lt;/p>
&lt;h3 id="多集群资源检索">多集群资源检索&lt;/h3>
&lt;p>我们先看一下我们都收集了哪些资源，只有被收集的资源才可以进行检索。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia api-resources
NAME SHORTNAMES APIVERSION NAMESPACED KIND
pods po v1 &lt;span style="color:#204a87">true&lt;/span> Pod
deployments deploy apps/v1 &lt;span style="color:#204a87">true&lt;/span> Deployment
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到当前收集并支持 pods 和 deployments.apps 两种资源&lt;/p>
&lt;p>&lt;strong>查看所有集群的 kube-system 命名空间下的 deployments&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get deployments -n kube-system
CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
cluster-1 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 63d
cluster-1 coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 63d
cluster-2 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
cluster-2 coredns-coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 109d
cluster-2 dce-chart-manager 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
cluster-2 dce-clair 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看所有集群的 kube-system, default 命名空间下的 deployments&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get deployments -A -l &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/namespaces in (kube-system, default)&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看 cluster-1, cluster-2 两个集群下的 kube-system, default 命名空间下中的 deployments&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get deployments -A -l &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/clusters in (cluster-1, cluster-2),\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/namespaces in (kube-system,default)&amp;#34;&lt;/span>
NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
kube-system cluster-1 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 63d
kube-system cluster-1 coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 63d
default cluster-1 dao-2048-2048 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 20d
default cluster-1 hello-world-server 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 26d
default cluster-1 my-nginx 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 39d
default cluster-1 phpldapadmin 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 40d
kube-system cluster-2 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-2 coredns-coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 109d
kube-system cluster-2 dce-chart-manager 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-2 dce-clair 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>显示数据有删减，略多&lt;/em>&lt;/p>
&lt;p>&lt;strong>查看 cluster-1, cluster-2 两个集群下的 kube-system, default 命名空间下中的 deployments，并根据资源的名字排序&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster clusterpedia get deployments -A -l &lt;span style="color:#4e9a06">&amp;#34;search.clusterpedia.io/clusters in (cluster-1, cluster-2),\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/namespaces in (kube-system,default),\
&lt;/span>&lt;span style="color:#4e9a06"> search.clusterpedia.io/orderby=name&amp;#34;&lt;/span>
kube-system cluster-1 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 63d
kube-system cluster-2 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-1 coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 63d
kube-system cluster-2 coredns-coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 109d
default cluster-1 dao-2048-2048 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 20d
kube-system cluster-2 dce-chart-manager 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-2 dce-clair 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-2 dce-registry 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
kube-system cluster-2 dce-uds-storage-server 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
default cluster-1 dd-airflow-scheduler 0/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 53d
default cluster-1 dd-airflow-web 0/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 53d
kube-system cluster-2 metrics-server 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 109d
default cluster-1 my-nginx 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 39d
default cluster-1 nginx-dev 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 14d
default cluster-1 openldap 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 40d
default cluster-1 phpldapadmin 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 40d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>显示数据有删减，略多&lt;/em>&lt;/p>
&lt;h3 id="指定集群检索">指定集群检索&lt;/h3>
&lt;p>&lt;strong>我们如果想要检索指定集群的资源的话，我们可以使用 &amp;ndash;cluster 来指定具体的集群名称&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster cluster-1 get deployments -A
NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
kubeapps-oidc cluster-1 apach2-apache 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 35d
kube-system cluster-1 calico-kube-controllers 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 63d
cert-manager cluster-1 cert-manager 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 42d
cert-manager cluster-1 cert-manager-cainjector 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 42d
cert-manager cluster-1 cert-manager-webhook 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 42d
kube-system cluster-1 coredns 2/2 &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 63d
default cluster-1 dao-2048-2048 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 20d
kubernetes-dashboard cluster-1 dashboard-metrics-scraper 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 54d
default cluster-1 dd-airflow-scheduler 0/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 53d
default cluster-1 dd-airflow-web 0/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 53d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>显示数据有删减，略多&lt;/em>&lt;/p>
&lt;p>除了 &lt;a href="http://search.clusterpedia.io/clusters">http://search.clusterpedia.io/clusters&lt;/a> 外其余的复杂查询的支持和多集群检索相同。&lt;/p>
&lt;p>如果我们要获取一个资源的详情，那么也是需要指定集群才可以。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl --cluster cluster-1 -n kube-system get deployments coredns
CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE
cluster-1 apach2-apache 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 35d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>复杂检索clusterpedia 支持以下复杂检索：&lt;/p>
&lt;ul>
&lt;li>指定一个或者多个&lt;strong>集群名称&lt;/strong>&lt;/li>
&lt;li>指定一个或者多个&lt;strong>命名空间&lt;/strong>&lt;/li>
&lt;li>指定一个或者多个&lt;strong>资源名称&lt;/strong>&lt;/li>
&lt;li>指定多个字段的&lt;strong>排序&lt;/strong>&lt;/li>
&lt;li>&lt;strong>分页&lt;/strong>功能，可以指定 size 和 offset&lt;/li>
&lt;li>&lt;strong>labels 过滤&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>对于字段的排序，实际的效果是根据存储层来决定的，默认存储层支持根据 cluster , name , namespace , created_at , resource_version 进行正序或者倒序的排序。&lt;/p>
&lt;h3 id="检索条件的传递方式">检索条件的传递方式&lt;/h3>
&lt;p>上面实例中，演示了使用 kubectl 来进行检索，而这些复杂的检索条件通过 label 来传递的。实际上 clusterpedia 还支持直接通过 url query 的传递这些检索条件。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能&lt;/th>
&lt;th>label key&lt;/th>
&lt;th>url query&lt;/th>
&lt;th>example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Specified resource name&lt;/td>
&lt;td>search.clusterpedia.io/names&lt;/td>
&lt;td>names&lt;/td>
&lt;td>&lt;code>?names=pod-1,pod-2&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Specified namespace&lt;/td>
&lt;td>search.clusterpedia.io/namespaces&lt;/td>
&lt;td>namespaces&lt;/td>
&lt;td>&lt;code>?namespaces=kube-system,default&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Specified cluster name&lt;/td>
&lt;td>search.clusterpedia.io/clusters&lt;/td>
&lt;td>clusters&lt;/td>
&lt;td>&lt;code>?clusters=cluster-1,cluster-2&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sort by specified fileds&lt;/td>
&lt;td>search.clusterpedia.io/orderby&lt;/td>
&lt;td>orderby&lt;/td>
&lt;td>&lt;code>?orderby=name desc,namespace&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Specified size&lt;/td>
&lt;td>search.clusterpedia.io/size&lt;/td>
&lt;td>size&lt;/td>
&lt;td>&lt;code>?size=100&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Specified offset&lt;/td>
&lt;td>search.clsuterpedia.io/offset&lt;/td>
&lt;td>offset&lt;/td>
&lt;td>&lt;code>?offset=10&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>search label key 的操作符支持 ==, =, !=, in, not in 对于 size 这个条件，实际上 kubectl 可以通过 &amp;ndash;chunk-size 来指定，而不需要通过 label key。&lt;/p>
&lt;h3 id="聚合资源collection-resource">聚合资源(Collection Resource)&lt;/h3>
&lt;p>在 clusterpedia 还有对资源更加高级的聚合，使用 &lt;strong>Collection Resource&lt;/strong> 可以一次性获取到一组不同类型的资源。&lt;/p>
&lt;p>可以先查看一下当前 clusterpedia 支持哪些 &lt;strong>Collection Resource&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get collectionresources
NAME RESOURCES
workloads deployments.apps,daemonsets.apps,statefulsets.apps
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过获取 workloads 便可获取到一组 deployment, daemonset, statefulset 聚合在一起的资源 而且 Collection Resource 同样支持所有的复杂查询。&lt;/p>
&lt;p>&lt;code>kubectl get collectionresources workloads&lt;/code> 会默认获取所有集群下所有命名空间的相应资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get collectionresources workloads
CLUSTER GROUP VERSION KIND NAMESPACE NAME AGE
cluster-1 apps v1 DaemonSet kube-system vsphere-cloud-controller-manager 63d
cluster-2 apps v1 Deployment kube-system calico-kube-controllers 109d
cluster-2 apps v1 Deployment kube-system coredns-coredns 109d
cluster-2 apps v1 Deployment dce-acm-agent dce-acm-agent 84d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>在 cluster-1 中增加收集 Daemonset, 输出有删减，太多&lt;/em>&lt;/p>
&lt;p>由于 kubectl 的限制所以无法在 kubectl 来使用复杂查询，只能通过 url query 的方式来查询。&lt;/p>
&lt;h3 id="自定义-collection-resource">自定义 Collection Resource&lt;/h3>
&lt;p>&lt;strong>Collection Resource&lt;/strong> 支持哪些资源是由存储层来提供，而默认存储层未来会支持自定义组合 &lt;strong>Collection Resource&lt;/strong>。&lt;/p>
&lt;h2 id="新特性议题">新特性议题&lt;/h2>
&lt;h3 id="对资源进行更复杂的操作">对资源进行更复杂的操作&lt;/h3>
&lt;p>clusterpedia 不仅仅只是用来做资源检索，和 wiki 一样，它也应该具有对资源简单的控制能力，例如 watch, create, delete, update 等操作。&lt;/p>
&lt;p>对于写操作，实际会采用双写 + 响应 warning 的方式来完成。&lt;/p>
&lt;p>感兴趣的话可以在 issue 中一起讨论。&lt;/p>
&lt;h3 id="集群的自动发现与收集">集群的自动发现与收集&lt;/h3>
&lt;p>clusterpedia 中用来表示集群的资源叫做 PediaCluster, 而不是简单的 Cluster，最主要的原因便是 clusterpedia 设计初衷便是让 clusterpedia 可以建立在已有的多集群管理平台之上。&lt;/p>
&lt;p>为了遵循初衷，第一个问题便是不能和已有的多集群平台中的资源冲突， Cluster 便是一个最通用的代表集群的资源名称。&lt;/p>
&lt;p>另外为了更好的去接入到已有的多集群平台上，让已经接入的集群可以自动的完成资源收集，我们需要另外的一个集群发现机制。这个发现机制需要解决以下问题：&lt;/p>
&lt;ul>
&lt;li>能够获取到访问集群的认证信息&lt;/li>
&lt;li>可以配置触发 PediaCluster 生命周期的 Condition 条件&lt;/li>
&lt;li>设置默认的资源收集策略，以及名称前缀等&lt;/li>
&lt;/ul>
&lt;p>这个功能会在 Q1 或者 Q2 中开始详细讨论实现。&lt;/p>
&lt;h2 id="当前进展">当前进展&lt;/h2>
&lt;p>clusterpedia 当前处于比较早期的阶段 (v0.0.9-alpha)，核心功能刚刚完成，还有很多可以优化的地方，对于这些优化点也都提了对应的 issues，欢迎大家一起讨论&lt;/p>
&lt;p>这里简单说一些进入 v0.1.0 版本前的优化点:&lt;/p>
&lt;ul>
&lt;li>从具有 Server-Side Apply 特性的集群中收集到的资源会带有很臃肿的 managedFields 字段， clustersynchro manager 模块会增加相应 feature gate，来允许用户在收集时裁减掉这个字段&lt;/li>
&lt;li>同样的臃肿字段 annotations 中的 &lt;a href="http://kubectl.kubernetes.io/last-applied-configuration">http://kubectl.kubernetes.io/last-applied-configuration&lt;/a>，也要允许裁剪这个字段&lt;/li>
&lt;li>在指定集群获取资源时，如果集群处于异常状态时，应该在响应中添加 warning 来提醒用户&lt;/li>
&lt;li>对 PediaCluster 的状态信息有更准确的更新&lt;/li>
&lt;li>弱网环境下，资源收集的优化&lt;/li>
&lt;/ul>
&lt;p>更多的优化项，大家可以在 issue 中提出新的想法。&lt;/p>
&lt;h2 id="roadmap">Roadmap&lt;/h2>
&lt;p>当前只是暂定的 Roadmap，具体的排期还要看社区的需求程度&lt;/p>
&lt;h3 id="2021-q4">2021 Q4&lt;/h3>
&lt;p>在 2021 的 Q4 阶段会完成上述的优化项，并且完成对自定义资源的收集&lt;/p>
&lt;ul>
&lt;li>详细化资源收集状态&lt;/li>
&lt;li>自定义资源的收集&lt;/li>
&lt;/ul>
&lt;h3 id="2022-q1">2022 Q1&lt;/h3>
&lt;ul>
&lt;li>支持插件化存储层&lt;/li>
&lt;li>实现集群的自动发现和收集&lt;/li>
&lt;/ul>
&lt;h3 id="2022-q3">2022 Q3&lt;/h3>
&lt;ul>
&lt;li>支持对集群资源更多的控制，例如 watch/create/update/delete 等操作&lt;/li>
&lt;li>默认存储层支持自定义 Collection Resource&lt;/li>
&lt;li>支持请求附带关系资源&lt;/li>
&lt;/ul>
&lt;h2 id="使用注意">使用注意&lt;/h2>
&lt;h3 id="多集群网络连通">多集群网络连通&lt;/h3>
&lt;p>clusterpedia 实际并不会解决多集群环境下的网络连通问题，用户可以使用tower等工具来连接访问子集群，也可以借助 submariner 或者 skupper 来解决跨集群网络问题。&lt;/p></description></item></channel></rss>